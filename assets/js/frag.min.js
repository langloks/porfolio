const frag=function(n){const e=n.map((n,e)=>`\n\t\t\tif (index == ${e}) { return texture2D(textures[${e}], uv); }\n\t\t`).join(" else ");return`\n\n\t#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define MAX ${n.length}\n\nuniform float u_time;\nuniform vec2 u_resolution;\n\nuniform float timeline;\n\nuniform sampler2D textures[MAX];\n\nuniform float startIndex;\nuniform float endIndex;\n\nvarying vec3 v_normal;\nvarying vec2 v_texcoord;\n\t\n\t${includes}\n\nvec4 sampleColor(int index, vec2 uv) {\n    ${e}\n    \n    return vec4(1.0, 1.0, 1.0, 1.0);\n}\n\nvoid main(void)\n{\n    vec2 uv = v_texcoord;\n    uv -= 0.5;\n    \n    float wave = fbm(3.5 * uv + 0.2 * u_time);\n    float strength = smoothstep(0.0, 1.0, timeline) - smoothstep(2.0, 3.0, timeline);\n    float distortion = mix(1.0, 1.0 + strength, wave);\n    \n    uv *= distortion;\n    uv += 0.5;\n    \n    \n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n        discard;\n    }\n    \n    // pick images    \n    vec4 startTexture = sampleColor(int(startIndex), uv);\n    vec4 endTexture = sampleColor(int(endIndex), uv);\n    \n    // tween\n    float changeTimeline = smoothstep(0.5, 2., timeline);\n    float mixer = 1.0 - step(changeTimeline, wave);\n    \n    vec4 color = mix(startTexture, endTexture, mixer);\n    \n    gl_FragColor = color;\n}\n\n`};